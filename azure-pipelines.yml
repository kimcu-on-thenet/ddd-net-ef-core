trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - cake/*

pr:
  autoCancel: true
  branches:
    include:
    - master

pool:
    vmImage: 'ubuntu-16.04'

variables:
    buildConfiguration: 'Release'
    NETCoreVersion: '3.1.x'
    solutionFile: '$(Build.SourcesDirectory)/*.sln'
    unitTestPath: '$(Build.SourcesDirectory)/source/productcatalog/test'
    unitTestProjects: '$(unitTestPath)/*Tests/*.csproj'
    codeCoverageReportPath : '$(Build.SourcesDirectory)/CodeCoverage'
    sqlPassword: 'Kimcu@123'

stages:
- stage: RunBuild
  displayName: 'Run Build'
  jobs:
  - job: BuildJob
    steps:
    #############
    # Install .net core
    #############
    - task: UseDotNet@2
      displayName: "Install .NET Core $(NETCoreVersion)"
      inputs: 
        version: '$(NETCoreVersion)'
    #############
    # dotnet restore solution
    #############
    - task: DotNetCoreCLI@2
      displayName: "dotnet restore"
      inputs:
          command: 'restore'
          projects: '$(solutionFile)'
    #############
    # dotnet build solution
    #############
    - task: DotNetCoreCLI@2
      displayName: "dotnet build"
      inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          projects: '$(solutionFile)'

- stage: RunTests
  displayName: 'Run Tests'
  jobs:
  - job: RunTestsJob
    displayName: 'Run Tests Projects'
    steps:

    - script: |
        docker run -d -p 1433:1433 -e 'SA_PASSWORD=$(sqlPassword)' -e 'ACCEPT_EULA=Y' mcr.microsoft.com/mssql/server:2019-latest
      displayName: 'Start docker'

    - script: printenv

    - script: |
        docker ps -a
      displayName: "List all running containers"

    - script: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update 
        sudo apt-get install mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc
      displayName: 'Install SqlCommand tool for Linux'

    - script: |
        sqlcmd -S localhost -U sa -P $(sqlPassword) -Q "SELECT @@VERSION"
      displayName: 'Test SqlConnection'

    - script: |
        dotnet --list-sdks
      displayName: 'List all installed sdks'

    - task: UseDotNet@2
      displayName: "Install .NET Core $(NETCoreVersion)"
      inputs: 
        version: '$(NETCoreVersion)'
    #############
    # dotnet test
    #############
    - task: DotNetCoreCLI@2
      displayName: "dotnet test"
      inputs:
        command: test
        projects: '$(unitTestProjects)'
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        nobuild: true

    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.3.8
        $HOME/.dotnet/tools/reportgenerator -reports:$(unitTestPath)/**/coverage.cobertura.xml -targetdir:$(codeCoverageReportPath) -reporttypes:Cobertura
      displayName: 'Create Code coverage report'

    - task: PublishCodeCoverageResults@1
      continueOnError: true
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(codeCoverageReportPath)/Cobertura.xml'
        reportDirectory: '$(codeCoverageReportPath)'
        failIfCoverageEmpty: true

    - script: |
        docker container stop $(docker container ls -aq)
        docker container rm $(docker container ls -aq)
      displayName: 'Stop all container & Clean up'
      continueOnError: true

- stage: CleanUp
  displayName: "Cleanup After Build"
  jobs:
    - job: "CleanUpJob"
      steps:
      - task: DeleteFiles@1
        continueOnError: true
        inputs:
          SourceFolder: '$(Agent.BuildDirectory)'
          Contents: '**/*'
          RemoveSourceFolder: true
